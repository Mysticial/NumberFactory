/* Environment.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 01/04/2015
 * Last Modified    : 01/04/2015
 * 
 */

#pragma once
#ifndef _ymp_Environment_H
#define _ymp_Environment_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include <string>
#include "../Types.h"
namespace ymp{
namespace Environment{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
const upL_t MAX_MEMORY = (((upL_t)0 - 1) >> 5) * 15;
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void        LockToCore0             ();
void        LowerProcessPriority    ();
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
upL_t       GetLogicalProcessors    ();
upL_t       GetFreePhysicalMemory   ();
uiL_t       GetTotalPhysicalMemory  ();
std::string GetProcessorName        ();
uiL_t       GetProcessorFrequency   ();
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Run-Time Checks
void    WarnInsufficientMemory  (uiL_t bytes);
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  x86 Specific
u64_t   x86_rdtsc   ();
void    x86_cpuid   (u32_t eabcdx[4], u32_t eax, u32_t ecx = 0);
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
}
#endif
