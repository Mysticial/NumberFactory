/* Environment.cpp
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 01/04/2015
 * Last Modified    : 01/04/2015
 * 
 */

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#ifdef _WIN32
#include "Environment_Windows.ipp"
#endif
#ifdef __linux
#include "Environment_Linux.ipp"
#endif
namespace ymp{
namespace Environment{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void WarnInsufficientMemory(uiL_t bytes){
    if (static_cast<upL_t>(bytes) != bytes){
        Console::Warning(
            "Fatal Error:\n"
            "Cannot allocate more memory than what the address space provides.\n"
        );
        Console::Pause();
        Console::Quit(1);
    }

    uiL_t free_memory = GetFreePhysicalMemory();
    if (free_memory != 0 && free_memory < bytes){
        Console::Warning(
            "Warning:\n"
            "There is insufficient available memory to perform this operation.\n"
            "\n"
            "Insufficient memory may lead to virtual memory thrashing which can cause severe\n"
            "performance degradation and/or system unresponsiveness.\n"
        );
        Console::Pause();
        Console::println("\n");
    }
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void x86_CleanCPUName(char name[49]){
    upL_t c0 = 0;
    upL_t c1 = 0;
    int space_flag = 1;
    while (c1 < 48){
        if (space_flag && name[c1] == ' '){
            c1++;
            continue;
        }
        space_flag = name[c1] == ' ';
        name[c0++] = name[c1++];
    }

    while (c0 < 48)
        name[c0++] = '\0';
}
std::string GetProcessorName(){
    union{
        u32_t reg[12];
        char name[49];
    };
    x86_cpuid(reg + 0, 0x80000002, 0);
    x86_cpuid(reg + 4, 0x80000003, 0);
    x86_cpuid(reg + 8, 0x80000004, 0);

    x86_CleanCPUName(name);
    return name;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
}
