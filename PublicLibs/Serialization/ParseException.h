/* ParseException.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 09/26/2014
 * Last Modified    : 09/26/2014
 * 
 */

#pragma once
#ifndef _ymp_Serialization_ParseException_H
#define _ymp_Serialization_ParseException_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include "../Exception.h"
namespace ymp{
namespace Serialization{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#define YMC_EXCEPTION_PARSE   1
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
class ParseException : public ym_exception{
    virtual void fire_this() const{
        throw *this;
    }

public:
    ParseException(const char* message){
        level = YMC_EXCEPTION_PARSE;
        this->code = 1;
        this->message = message;
    }
    ParseException(const char* message, int code){
        level = YMC_EXCEPTION_PARSE;
        this->code = code;
        this->message = message;
    }
};
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
}
#endif
