/* GlobalParallelFramework.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 02/04/2016
 * Last Modified    : 02/04/2016
 * 
 *      A global instance of the parallel framework.
 * 
 *  This is only used by YMP and NumberFactory since it makes them easier to use.
 *  As of v0.7.1, y-cruncher itself no longer uses a global framework object.
 * 
 */

#pragma once
#ifndef _ymp_GlobalParallelFramework_H
#define _ymp_GlobalParallelFramework_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include "PublicLibs/CompilerSettings.h"
#include "PublicLibs/Types.h"
#include "PublicLibs/ExportSafeLibs/Pointer.h"
#include "PublicLibs/ExportSafeLibs/Action.h"
#include "PublicLibs/ExportSafeLibs/Exceptions.h"
namespace ymp{
    class ParallelFramework;
namespace Parallelism{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Get and Set the global framework.
ParallelFramework& get_global_framework();
void set_global_framework(ParallelFramework& framework);
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Parallelize using global framework.
void run_in_parallel(BasicAction& a0, BasicAction& a1);
void run_in_parallel(IndexAction& action, upL_t si, upL_t ei);
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  DLL Exports
extern "C" {
    YMP_EXPORT ParallelFramework& internal_get_global_framework();
    YMP_EXPORT void internal_set_global_framework(ParallelFramework& framework);
    YMP_EXPORT void dll_global_run_in_parallel_BasicAction(dll_BasicAction& a0, dll_BasicAction& a1);
    YMP_EXPORT void dll_global_run_in_parallel_IndexAction(dll_IndexAction& action, upL_t si, upL_t ei);
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Get and Set the global framework.
inline ParallelFramework& get_global_framework(){
    return internal_get_global_framework();
}
inline void set_global_framework(ParallelFramework& framework){
    return internal_set_global_framework(framework);
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Parallelize using global framework.
#ifdef YMP_IMPORT
inline void run_in_parallel(BasicAction& a0, BasicAction& a1){
    dll_BasicAction d0(a0);
    dll_BasicAction d1(a1);
    dll_global_run_in_parallel_BasicAction(d0, d1);
}
inline void run_in_parallel(IndexAction& action, upL_t si, upL_t ei){
    dll_IndexAction d0(action);
    dll_global_run_in_parallel_IndexAction(d0, si, ei);
}
#endif
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
}
#endif
