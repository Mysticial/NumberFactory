/* GlobalLookupTable.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 06/24/2015
 * Last Modified    : 02/07/2016
 * 
 *      A global instance of the lookup/twiddle-factor tables.
 * 
 *  This is only used by YMP and NumberFactory since it makes them easier to use.
 *  As of v0.7.1, y-cruncher itself no longer uses a global table object.
 * 
 */

#pragma once
#ifndef _ymp_GlobalLookupTable_H
#define _ymp_GlobalLookupTable_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include <type_traits>
#include "PublicLibs/CompilerSettings.h"
#include "PublicLibs/Types.h"
#include "PublicLibs/TemplateTools.h"
#include "PublicLibs/ExportSafeLibs/Pointer.h"
#include "PublicLibs/ExportSafeLibs/Exceptions.h"
namespace ymp{
    class LookupTable;
namespace LookupTables{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Get the global table. If it isn't large enough to handle cwordlen, it will
//  resize it so it is large enough. This is thread-safe.
template <typename wtype>
const LookupTable& get_global_table(uiL_t cwordlen = (uiL_t)0 - 1);

//  Get the global table. If it isn't large enough to handle cbitlen, it will
//  resize it so it is large enough. This is thread-safe.
const LookupTable& get_global_table_bits(uiL_t cbitlen);

//  Get the current size of the global table in cbitlen.
uiL_t get_global_table_size_cbitlen();
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  DLL Export Hell
extern "C" {
    YMP_EXPORT const LookupTable& internal_get_global_table_bits(uiL_t cbitlen);
    YMP_EXPORT uiL_t internal_get_global_table_size_cbitlen();
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
template <typename wtype>
const LookupTable& get_global_table(uiL_t cwordlen){
    if (cwordlen == (uiL_t)0 - 1){
        return get_global_table_bits(cwordlen);
    }else{
        return get_global_table_bits(cwordlen * WordTraits<wtype>::BITS);
    }
}
#ifdef YMP_IMPORT
inline const LookupTable& get_global_table_bits(uiL_t cbitlen){
    return internal_get_global_table_bits(cbitlen);
}
inline uiL_t get_global_table_size_cbitlen(){
    return internal_get_global_table_size_cbitlen();
}
#endif
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
}
#endif
