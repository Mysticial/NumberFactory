/* TaskParallelizer.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 08/27/2014
 * Last Modified    : 07/08/2015
 * 
 * 
 *      This file provides methods for parallelizing tasks without needing to
 *  to directly mess with threads. This layer of indirection also allows for the
 *  possibility of using OpenMP or Cilk instead of native threads.
 * 
 */

#pragma once
#ifndef _ymp_Threads_TaskParallelizer_H
#define _ymp_Threads_TaskParallelizer_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include "PublicLibs/CompilerSettings.h"
#include "PublicLibs/Types.h"
#include "Action.h"
namespace ymp{
namespace Threads{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  DLL Exports
extern "C" {
    YMP_EXPORT void dll_RunInParallel_BasicAction(dll_BasicAction& a0, dll_BasicAction& a1);
    YMP_EXPORT void dll_RunInParallel_IndexAction(dll_IndexAction& action, upL_t si, upL_t ei);
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void RunInParallel(BasicAction& a0, BasicAction& a1);
void RunInParallel(IndexAction& action, upL_t si, upL_t ei);
////////////////////////////////////////////////////////////////////////////////
void SpawnThreads(IndexAction& action, upL_t si, upL_t ei, int priority = 0);
void SpawnThreadsReuseCurrent(IndexAction& action, upL_t si, upL_t ei, int priority = 0);
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  DLL Export Hell
#ifdef YMP_IMPORT
YM_FORCE_INLINE void RunInParallel(BasicAction& a0, BasicAction& a1){
    dll_BasicAction d0(a0);
    dll_BasicAction d1(a1);
    dll_RunInParallel_BasicAction(d0, d1);
}
YM_FORCE_INLINE void RunInParallel(IndexAction& action, upL_t si, upL_t ei){
    dll_IndexAction d0(action);
    dll_RunInParallel_IndexAction(d0, si, ei);
}
#endif
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
}
#endif
