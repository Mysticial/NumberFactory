/* Time_Windows.ipp
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 09/17/2014
 * Last Modified    : 09/17/2014
 * 
 */

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include <time.h>
#include <Windows.h>
#include "PublicLibs/ConsoleIO/Label.h"
#include "Time_Windows.h"
namespace ymp{
namespace Time{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void CompileOptions(){
    Console::println_labelm("Time", "WinAPI", 'G');
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
WallClock WallClock::Now(){
    LARGE_INTEGER x;
    if (!QueryPerformanceCounter(&x)){
        //TimeException(
        //    GetLastError(),
        //    "QueryPerformanceCounter()",
        //    "Unable to access performance counter."
        //).fire();
        Console::Warning("Unable to access performance counter.");
        Console::Quit(1);
    }
    WallClock out;
    out.ticks = x.QuadPart;
    return out;
}
double WallClock::operator-(const WallClock& x) const{
    LARGE_INTEGER freqency;
    if (!QueryPerformanceFrequency(&freqency)){
        //TimeException(
        //    GetLastError(),
        //    "QueryPerformanceFrequency()",
        //    "Unable to access performance counter."
        //).fire();
        Console::Warning("Unable to access performance counter.");
        Console::Quit(1);
    }
    return (double)(ticks - x.ticks) / freqency.QuadPart;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
double CPUClock(){
    FILETIME a, b, c, d;
    if (GetProcessTimes(GetCurrentProcess(), &a, &b, &c, &d) == 0){
        //TimeException(
        //    GetLastError(),
        //    "CPUClock()",
        //    "Unable to get CPU Clock."
        //).fire();
        Console::Warning("Unable to get CPU Clock.");
        Console::Quit(1);
    }
    return (double)(d.dwLowDateTime | ((u64_t)d.dwHighDateTime << 32)) * 0.0000001;
}
std::string tostr_now(){
    struct tm newtime;
    __time32_t aclock;

    _time32(&aclock);
    _localtime32_s(&newtime, &aclock);

    char buffer[32];
    asctime_s(buffer, 32, &newtime);

    //  Stop at the first control character.
    upL_t c = 0;
    while (buffer[c] >= 32)
        c++;
    buffer[c] = '\0';

    return buffer;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
}
