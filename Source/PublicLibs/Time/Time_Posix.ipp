/* Time_Linux.ipp
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 09/17/2014
 * Last Modified    : 09/17/2014
 * 
 */

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include <time.h>
#include "PublicLibs/ConsoleIO/Label.h"
#include "Time_Posix.h"
namespace ymp{
namespace Time{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void CompileOptions(){
    Console::println_labelm("Time", "POSIX", 'G');
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
WallClock WallClock::Now(){
    WallClock out;
    if (gettimeofday(&out.time, NULL)){
        //TimeException(
        //    errno,
        //    "gettimeofday()",
        //    "Unable to access gettimeofday()."
        //).fire();
        Console::Warning("Unable to access gettimeofday().");
        Console::Quit(1);
    }
    return out;
}
double WallClock::operator-(const WallClock& x) const{
    u64_t isec = (u64_t)time.tv_sec - (u64_t)x.time.tv_sec;
    s32_t usec = time.tv_usec - x.time.tv_usec;
    if (usec < 0){
        usec += 1000000;
        isec--;
    }
    return (double)isec + (double)usec * .000001;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
double CPUClock(){
    return clock() * ((double)1. / CLOCKS_PER_SEC);
}
std::string tostr_now(){
    time_t rawtime = time(NULL);

    char buffer[32];

    const char* current_time = asctime(localtime(&rawtime));
    char ch;
    upL_t c = 0;
    do{
        ch = *current_time;
        buffer[c++] = *current_time++;
    }while (ch != '\0');

    c = 0;
    while (buffer[c] >= 32)
        c++;
    buffer[c] = '\0';

    return buffer;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
}
