/* StopWatch.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 02/12/2015
 * Last Modified    : 02/12/2015
 * 
 *      A stopwatch that tracks both wall time and CPU time. This is used for
 *  generating CPU utilization and efficiency profiles.
 * 
 *  Like any other stopwatch, it can be stopped and resumed so that you time
 *  only stuff that you care about it.
 * 
 */

#pragma once
#ifndef _ymp_StopWatch_H
#define _ymp_StopWatch_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include <string>
#include "Time.h"
namespace ymp{
namespace Time{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
class StopWatch{
    WallClock wall_clock;       //  Wall clock of the last stopwatch start
    double cpu_clock;           //  CPU clock of the last stopwatch start

    double total_wall_time;     //  Total accumulated wall time
    double total_cpu_time;      //  Total accumulated CPU time
    bool is_running;

public:
    StopWatch(){ Reset(); }

    void Reset();
    void Start();
    void Stop();

public:
    double GetWallTime() const;
    double GetCpuUtilization() const;
    double GetTimes(double& cpu_time) const;

    void PrintCpuUtilization() const;

public:
    //  Serialization
    void Serialize(std::wstring& stream) const;
    void Deserialize(const wchar_t*& stream);
};
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
}
#endif
