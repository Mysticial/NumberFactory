/* Array.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 05/31/2015
 * Last Modified    : 05/31/2015
 * 
 */

#pragma once
#ifndef _ymp_ExportSafeLibs_Array_H
#define _ymp_ExportSafeLibs_Array_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
namespace ymp{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
template <typename type>
static void local_arr_deleter(type* ptr){
    delete[] ptr;
}
////////////////////////////////////////////////////////////////////////////////
template <typename type>
class dll_uarr{
    type* ptr;
    void (*deleter)(type*);

public:
    //  Rule of 5
    dll_uarr(const dll_uarr&) = delete;
    void operator=(const dll_uarr&) = delete;
    dll_uarr(dll_uarr&& x)
        : ptr(x.ptr)
        , deleter(x.deleter)
    {
        x.ptr = nullptr;
    }
    void operator=(dll_uarr&& x){
        reset();
        ptr = x.ptr;
        deleter = x.deleter;
        x.ptr = nullptr;
    }
    ~dll_uarr(){ reset(); }

public:
    //  Constructors
    dll_uarr() : ptr(nullptr) {}
    dll_uarr(type* ptr, void (*deleter)(type*) = &local_arr_deleter)
        : ptr(ptr)
        , deleter(deleter)
    {}
    void reset(){
        if (ptr != nullptr)
            deleter(ptr);
    }

public:
    //  Getters
    type* get(){
        return ptr;
    }
    const type* get() const{
        return ptr;
    }
    type& operator[](size_t index){
        return ptr[index];
    }
    const type& operator[](size_t index) const{
        return ptr[index];
    }
};
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
#endif
