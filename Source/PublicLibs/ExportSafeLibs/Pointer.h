/* Pointer.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 05/31/2015
 * Last Modified    : 05/31/2015
 * 
 */

#pragma once
#ifndef _ymp_ExportSafeLibs_Pointer_H
#define _ymp_ExportSafeLibs_Pointer_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
namespace ymp{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
template <typename type>
static void local_ptr_deleter(type* ptr){
    delete ptr;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
template <typename type>
class dll_uptr{
    type* ptr;
    void (*deleter)(type*);

public:
    //  Rule of 5
    dll_uptr(const dll_uptr&) = delete;
    void operator=(const dll_uptr&) = delete;
    dll_uptr(dll_uptr&& x)
        : ptr(x.ptr)
        , deleter(x.deleter)
    {
        x.ptr = nullptr;
    }
    void operator=(dll_uptr&& x){
        reset();
        ptr = x.ptr;
        deleter = x.deleter;
        x.ptr = nullptr;
    }
    ~dll_uptr(){ reset(); }

public:
    //  Constructors
    dll_uptr() : ptr(nullptr) {}
    dll_uptr(type* ptr, void (*deleter)(type*) = &local_ptr_deleter)
        : ptr(ptr)
        , deleter(deleter)
    {}
    void reset(){
        if (ptr != nullptr)
            deleter(ptr);
    }
    void reset(type* ptr, void (*deleter)(type*) = &local_ptr_deleter){
        reset();
        this->ptr = ptr;
        this->deleter = deleter;
    }

public:
    //  Getters
    type* get(){
        return ptr;
    }
    const type* get() const{
        return ptr;
    }
    type* operator->(){
        return ptr;
    }
    const type* operator->() const{
        return ptr;
    }
    type& operator*(){
        return *ptr;
    }
    const type& operator*() const{
        return *ptr;
    }
};
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
#endif
