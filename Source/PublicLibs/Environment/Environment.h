/* Environment.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 01/04/2015
 * Last Modified    : 01/01/2016
 * 
 */

#pragma once
#ifndef _ymp_Environment_H
#define _ymp_Environment_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include "PublicLibs/Types.h"
namespace ymp{
namespace Environment{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
const upL_t MAX_MEMORY = (((upL_t)0 - 1) / 32) * 15;
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void    LowerProcessPriority    ();
bool    LockToCore              (upL_t core = (upL_t)0 - 1);  //  Defaults to largest core #. Returns true on success.
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
upL_t       GetLogicalProcessors    ();
upL_t       GetFreePhysicalMemory   ();
uiL_t       GetTotalPhysicalMemory  ();
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
inline upL_t SuggestUseAllMemory(){
    //  Anything that wants to use all available memory should call this.
    //  15/16 should leave behind a reasonable amount for the OS.
    return GetFreePhysicalMemory() / 16 * 15;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  x86 Specific
u64_t   x86_rdtsc   ();
void    x86_cpuid   (u32_t eabcdx[4], u32_t eax, u32_t ecx = 0);
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
}
#endif
