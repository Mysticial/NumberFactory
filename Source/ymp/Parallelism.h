/* Parallelism.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 05/31/2015
 * Last Modified    : 02/04/2016
 * 
 */

#pragma once
#ifndef ymp_Parallelism_H
#define ymp_Parallelism_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include <memory>
#include "PublicLibs/CompilerSettings.h"
#include "PublicLibs/Types.h"
#include "PublicLibs/Action.h"
#include "PublicLibs/ExportSafeLibs/Pointer.h"
#include "PublicLibs/ExportSafeLibs/Action.h"
#include "PublicLibs/ExportSafeLibs/Exceptions.h"
#include "Modules/Parameters/GlobalParallelFramework.h"
namespace ymp{
    class ParallelFramework;
namespace Parallelism{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Parallel Framework Factory
dll_uptr<ParallelFramework> make_framework_by_name(const char* name);
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Methods for the framework object.
const char* framework_get_name(const ParallelFramework& framework);
void framework_print_details(const ParallelFramework& framework, upL_t tds);
void run_in_parallel(ParallelFramework& framework, BasicAction& a0, BasicAction& a1);
void run_in_parallel(ParallelFramework& framework, IndexAction& action, upL_t si, upL_t ei);
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  DLL Exports
extern "C" {
    YMP_EXPORT ExceptionWrapper* internal_make_framework_by_name(dll_uptr<ParallelFramework>& framework, const char* name);
    YMP_EXPORT const char* internal_framework_get_name(const ParallelFramework& framework);
    YMP_EXPORT ExceptionWrapper* internal_framework_print_details(const ParallelFramework& framework, upL_t tds);
    YMP_EXPORT void dll_framework_run_in_parallel_BasicAction(ParallelFramework& framework, dll_BasicAction& a0, dll_BasicAction& a1);
    YMP_EXPORT void dll_framework_run_in_parallel_IndexAction(ParallelFramework& framework, dll_IndexAction& action, upL_t si, upL_t ei);
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Parallel Framework Factory
inline dll_uptr<ParallelFramework> make_framework_by_name(const char* name){
    dll_uptr<ParallelFramework> uptr;
    YMP_EXPAND_EXCEPTION(internal_make_framework_by_name(uptr, name));
    return uptr;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Methods for the framework object.
inline const char* framework_get_name(const ParallelFramework& framework){
    return internal_framework_get_name(framework);
}
inline void framework_print_details(const ParallelFramework& framework, upL_t tds){
    YMP_EXPAND_EXCEPTION(internal_framework_print_details(framework, tds));
}
#ifdef YMP_IMPORT
inline void run_in_parallel(ParallelFramework& framework, BasicAction& a0, BasicAction& a1){
    dll_BasicAction d0(a0);
    dll_BasicAction d1(a1);
    dll_framework_run_in_parallel_BasicAction(framework, d0, d1);
}
inline void run_in_parallel(ParallelFramework& framework, IndexAction& action, upL_t si, upL_t ei){
    dll_IndexAction d0(action);
    dll_framework_run_in_parallel_IndexAction(framework, d0, si, ei);
}
#endif
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
}
#endif
