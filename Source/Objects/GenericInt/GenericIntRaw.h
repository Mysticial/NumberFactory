/* GenericIntRaw.h - Generic Integer
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 08/12/2015
 * Last Modified    : 08/12/2015
 * 
 * 
 *      This is the non-ownership child class of "GenericInt.h". It is hard to
 *  use, but has minimal overhead.
 * 
 */

#pragma once
#ifndef ymp_GenericIntRaw_H
#define ymp_GenericIntRaw_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include "GenericInt.h"
namespace ymp{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Headers
template <typename wtype>
class BigIntR : public BigInt<wtype>{
////////////////////////////////////////////////////////////////////////////////
//  Rule of 5
private:
    BigIntR(const BigIntR&) = delete;
    void operator=(const BigIntR&) = delete;
public:
    YM_FORCE_INLINE BigIntR(BigIntR&& x)
        : BigInt<wtype>(x)
    {
        x.base_ptr = nullptr;
        x.T = nullptr;
    }
    YM_FORCE_INLINE void operator=(BigIntR&& x){
        BigInt<wtype>::operator=(x);
        x.base_ptr = nullptr;
        x.T = nullptr;
    }

////////////////////////////////////////////////////////////////////////////////
//  Constructors
public:
    BigIntR() = default;
    YM_FORCE_INLINE BigIntR(const BigIntR<wtype>& x, upL_t L) : BigInt<wtype>(x, L) {}
    YM_FORCE_INLINE BigIntR(const BigIntR<wtype>& x, upL_t s, upL_t L) : BigInt<wtype>(x, s, L) {}
    YM_FORCE_INLINE BigIntR(upL_t L, const BigIntR<wtype>& x) : BigInt<wtype>(L, x) {}
    YM_FORCE_INLINE BigIntR(wtype* ptr, upL_t size) : BigInt<wtype>(size) {
        this->base_ptr = ptr;
        this->T = ptr;
    }

////////////////////////////////////////////////////////////////////////////////
//  Setters
public:
    using BigInt<wtype>::set_zero;
    using BigInt<wtype>::set_uW;
    using BigInt<wtype>::set_uL;
    using BigInt<wtype>::set_BigFloat;

////////////////////////////////////////////////////////////////////////////////
//  Getters
public:
    using BigInt<wtype>::get_baseptr;

////////////////////////////////////////////////////////////////////////////////
//  Basic Arithmetic
public:
    using BigInt<wtype>::negate;
    using BigInt<wtype>::operator<<=;
    using BigInt<wtype>::operator>>=;
    using BigInt<wtype>::operator*=;
    using BigInt<wtype>::set_mul_uW;
    using BigInt<wtype>::add_ip;

////////////////////////////////////////////////////////////////////////////////
//  Addition
public:
    using BigInt<wtype>::set_add;
    using BigInt<wtype>::set_sub;

////////////////////////////////////////////////////////////////////////////////
//  Multiplication
public:
    using BigInt<wtype>::set_sqr;
    using BigInt<wtype>::set_mul;

};
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
#endif
